// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"context"
	"fmt"
	"github.com/terashi58/wire-example/app/config"
	"github.com/terashi58/wire-example/app/service"
	"github.com/terashi58/wire-example/app/service/greeter"
	"github.com/terashi58/wire-example/app/service/pinger"
	"github.com/terashi58/wire-example/base/database"
	"github.com/terashi58/wire-example/base/database/mysql"
	"github.com/terashi58/wire-example/base/rpc"
	"github.com/terashi58/wire-example/base/rpc/interceptor"
	"github.com/terashi58/wire-example/base/server"
	"time"
)

// Injectors from injector.go:

func initializeApp(ctx context.Context, flags *cliFlags) (*app, func(), error) {
	serverConfig := httpConfig(flags)
	params := &server.Params{
		Config: serverConfig,
	}
	serverServer := server.New(params)
	config2 := rpcConfig(flags)
	mysqlConfig := config.MysqlConfig()
	dataSource := mysql.NewDataSource(mysqlConfig)
	db, cleanup, err := database.Open(dataSource)
	if err != nil {
		return nil, nil, err
	}
	greeterServer := greeter.NewServer(db)
	pingerServer := pinger.NewServer()
	v := service.NewServices(greeterServer, pingerServer)
	v2 := interceptor.Default()
	rpcParams := &rpc.Params{
		Config:       config2,
		Services:     v,
		Interceptors: v2,
	}
	rpcServer := rpc.New(rpcParams)
	mainAppParams := appParams{
		statusServer: serverServer,
		rpcServer:    rpcServer,
	}
	mainApp := newApp(mainAppParams)
	return mainApp, func() {
		cleanup()
	}, nil
}

// injector.go:

func httpConfig(flags *cliFlags) server.Config {
	return server.Config{
		Addr:         fmt.Sprintf(":%d", flags.StatusPort),
		ServeTimeout: 5 * time.Second,
	}
}

func rpcConfig(flags *cliFlags) rpc.Config {
	return rpc.Config{
		Addr: fmt.Sprintf(":%d", flags.Port),
	}
}
